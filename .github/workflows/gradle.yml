# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  pull_request:
    branches: [ "master" ]
  push:
    branches: [ "master" ]

jobs:
#  build:
#    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#      - name: Set up JDK 21
#        uses: actions/setup-java@v4
#        with:
#          java-version: '21'
#          distribution: 'temurin'
#      - name: Setup Gradle
#        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
#      - name: Build with Gradle Wrapper
#        run: ./gradlew build
#      - name: Store jacoco report
#        uses: actions/upload-artifact@v3
#        with:
#          name: jacoco_coverage_report
#          path: build/reports/jacoco/test/html
#      - name: Store test reports
#        uses: actions/upload-artifact@v3
#        with:
#          name: test_report
#          path: build/reports/tests/test
  #  update_coverage_report:
  #    needs: build
  #    permissions:
  #      contents: read
  #      pages: write
  #      id-token: write
  #    uses: ./.github/workflows/test_coverage.yaml
  #
  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: start minikube
        id: minikube
        uses: medyagh/setup-minikube@latest
      - name: Try the cluster !
        run: kubectl get pods -A
      - name: Build Image
        run: |
          export SHELL=/bin/bash
          eval $(minikube -p minikube docker-env)
          docker build -f ./Dockerfile -t chess_backend .
          echo -n "Verifying images: "
          docker images
      - name: Deploy to Minikube
        run: |
          kubectl apply -f deploy.yaml
          kubectl apply -f service.yaml
          kubectl wait --for=condition=Ready pod -l app=chess_backend
          kubectl get all
      - name: Test service URLs
        run: |
          echo "CLUSTER_IP=$(kubectl get service chess_backend --output='jsonpath={.spec.clusterIPs[0]}')"
          echo "SERVICE_URL=$(minikube service chess_backend --url)"
          kubectl port-forward service/chess_backend 8080:8080 &> /dev/null &
      - run: |
          curl -i http://localhost:8080/game/
      - name: Cleanup
        run: |
          eval $(minikube docker-env -u)
          minikube delete